#!/bin/sh

# Looks for a new available cernvm-system version and steers the update process

set -e

VERSION=0.5
USER_RPMDB="/var/lib/rpm"
SYSTEM_RPMDB="/mnt/.ro/cvm3/var/lib/rpm"
STATE_DIRECTORY="/var/lib/cernvm-update"

. /usr/share/cernvm-update/return_codes


print_ok() {

echo -e "[ \e[1;32m $1 \e[0m ]"

}

print_error() {
    echo -e "[ \e[1;31m $1 \e[0m ]"
}

print_warning() {
   echo -e "[ \e[1;33m $1 \e[0m ]"
}


diff_rpmdb() {
    local rpmdb1=$1
    local rpmdb2=$2
    local user_packages=$3

    local packages1=$(mktemp)
    local packages2=$(mktemp)
    local user_package_names=$(mktemp)

    rpm --dbpath $rpmdb1 -qa | sort -d > $packages1
    rpm --dbpath $rpmdb2 -qa | sort -d > $packages2
    diff --normal $packages1 $packages2 | grep '>' | tr -d '>' | tr -d ' ' \
      > $user_package_names
    rm -f "$packages1" "$packages2"
    cat $user_package_names | while read LINE; do
      if [ ! -z "$LINE" ]; then
        rpm --dbpath $rpmdb2 -q --qf "%{NAME} = %{VERSION}\n" "$LINE" >> $user_packages
      fi
    done
    rm -f $user_package_names
}


pre_update() {
    # Should be called before any update takes place as it
    # collects all the relevant information
    # to construct the state of the system necessary
    # for post-update actions

    # Remove any previously added contents in state directory
    rm -rf "${STATE_DIRECTORY}/run"
    rm -rf "${STATE_DIRECTORY}/rpmbuild"

    local tmpdir=$(mktemp -d)
    cd $tmpdir
    echo -n "  detecting manually installed packages... "
    diff_rpmdb "$SYSTEM_RPMDB" "$USER_RPMDB" "${tmpdir}/user_packages"
    if [ -f "${tmpdir}/user_packages" ]; then
      echo "found:"
      while read PKG; do
        echo "    $PKG"
      done < "${tmpdir}/user_packages"
    else
      print_ok "(none)"
    fi
    #ifs_b=$IFS
    #IFS=$'\n'

    # create rpm replicas
    if [ -f "${tmpdir}/user_packages" ]; then
      echo -n "  saving manually installed packages... "
      mkdir -p "${STATE_DIRECTORY}/rpmbuild" "${STATE_DIRECTORY}/run"
      while read PKG; do
        rpmrebuild -b -d ${STATE_DIRECTORY}/rpmbuild $(echo "$PKG" | awk '{print $1"-"$3}') > /dev/null
      done < "${tmpdir}/user_packages"
      find "${STATE_DIRECTORY}/rpmbuild" -name '*.rpm' -exec cp {} "${STATE_DIRECTORY}/run" \;
      rm -rf "${STATE_DIRECTORY}/rpmbuild"
      print_ok "OK"
    fi

    rm -rf "${tmpdir}"
    return 0
}

mount_update_packs() {
    local tmpdir=$(mktemp -d)
    mkdir "${tmpdir}/mountpoint" "${tmpdir}/cache"

    local cvmfs_conf="${tmpdir}/update-packs.conf"
    echo "CVMFS_CACHE_BASE=${tmpdir}/cache" > $cvmfs_conf
    echo "CVMFS_RELOAD_SOCKETS=${tmpdir}/cache" >> $cvmfs_conf
    echo "CVMFS_SERVER_URL=$(attr -qg host /mnt/.ro)" >> $cvmfs_conf
    local proxy=$(attr -qg proxy /mnt/.ro)
    [ -z "$proxy" ] && proxy=DIRECT
    echo "CVMFS_HTTP_PROXY=$proxy" >> $cvmfs_conf
    echo "CVMFS_KEYS_DIR=/mnt/.rw/aux/keys/$(attr -qg fqrn /mnt/.ro)" >> $cvmfs_conf
    cvmfs2 -o config="$cvmfs_conf" $(attr -qg fqrn /mnt/.ro) "${tmpdir}/mountpoint" >/dev/null
    echo "${tmpdir}/mountpoint"
}


umount_update_packs() {
  local mountpoint="$1"
  local parent=$(dirname "$mountpoint")
  fusermount -u "$mountpoint"
  rm "${parent}/update-packs.conf"
  rmdir "$mountpoint"
  rm -rf "${parent}/cache"
  rmdir "$parent"
}


usage() {
  echo "$0 [-c(heck)] [-a(pply)] [-f(orce)]"
}


version() {
  echo "$0 version $VERSION"
}


check() {
    echo "$AVAILABLE_VERSION"
    if [ "x$AVAILABLE_VERSION" = "x$INSTALLED_VERSION" ]; then
        return $RETURN_UP2DATE
    else
        return $RETURN_UPDATE_AVAIL
    fi
}


mk_update_key() {
    echo "upd-${INSTALLED_VERSION}-to-${AVAILABLE_VERSION}-$(date -u +%F-%H-%M-%S)"
}

unpin_snapshot() {
  if [ -f /mnt/.rw/aux/cvmfs_snapshot ]; then
    mv "/mnt/.rw/aux/cvmfs_snapshot" "/mnt/.rw/aux/cvmfs_snapshot.$(mk_update_key)"
  fi
}

update_kernel() {
  mkdir -p /mnt/.rw/kexec
  cd /mnt/.rw/kexec
  local update_pack=$(cat "$mountpoint/update-packs/kernel/latest" | grep "update-pack=" | cut -d '=' -f 2)
  tar -xf $mountpoint/update-packs/kernel/$update_pack
}

die() {
  echo "$1"
  exit 1
}


mountpoint=$(mount_update_packs)
INSTALLED_VERSION=$(rpm --dbpath /mnt/.ro/cvm3/var/lib/rpm -q --qf "%{VERSION}" cernvm-system)
AVAILABLE_VERSION=$(cat "$mountpoint/update-packs/cvm3/latest" | grep "version=" | cut -d '=' -f 2)
UPDATE_PACK=$(cat "$mountpoint/update-packs/cvm3/latest" | grep "update-pack=" | cut -d '=' -f 2)
INSTALLED_UCERNVM=$(cat /mnt/.rw/aux/ucernvm-version)
AVAILABLE_UCERNVM=$(cat "$mountpoint/update-packs/kernel/latest" | grep "version=" | cut -d '=' -f 2)

while getopts "cakfvh" option; do
  case $option in
    c)
      umount_update_packs "$mountpoint"
      check || {
          RETVAL=$?
          exit $RETVAL
      }
      exit 0
    ;;
    f)
      [ $(id -u) -ne 0 ] && die "root permissions required."
      pre_update
      unpin_snapshot
      echo "Please reboot to make the update effective."
      exit 0
    ;;
    a)
      [ $(id -u) -ne 0 ] && die "root permissions required."
      check >/dev/null || {
        pre_update
        unpin_snapshot
        echo "Please reboot to make the update effective."
        exit 0
      }
      exit 0
    ;;
    k)
      [ $(id -u) -ne 0 ] && die "root permissions required."
      update_kernel
      echo "Please reboot to load the update bootloader uCernVM $AVAILABLE_UCERNVM"
      exit 0
    ;;
    h)
      umount_update_packs "$mountpoint"
      usage
      exit 0
    ;;
    v)
      umount_update_packs "$mountpoint"
      version
      exit 0
    ;;
    ?)
      umount_update_packs "$mountpoint"
      usage
      exit 1
    ;;
  esac
done

[ -d "$mountpoint" ] && umount_update_packs "$mountpoint"
echo "Installed: CernVM $INSTALLED_VERSION"
echo "Available: CernVM $AVAILABLE_VERSION"
echo "Bootloader installed: uCernVM $INSTALLED_UCERNVM"
echo "Bootloader available: uCernVM $AVAILABLE_UCERNVM"
exit $RETVAL
